{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EventosComponent = class EventosComponent {\n  get filtroLitsta() {\n    return this.filtroListado;\n  }\n  set filtroLitsta(value) {\n    this.filtroListado = value;\n    this.eventosFltrados = this.filtroLitsta ? this.filtroEventos(this.filtroLitsta) : this.eventos;\n  }\n  filtroEventos(filtroPor) {\n    filtroPor = filtroPor.toLocaleLowerCase();\n    return this.eventos.filter(evento => evento.tema.toLocaleLowerCase().indexOf(filtroPor) !== -1 || evento.local.toLocaleLowerCase().indexOf(filtroPor) !== -1);\n  }\n  constructor(eventoService, modalService) {\n    this.eventoService = eventoService;\n    this.modalService = modalService;\n    this.eventos = [];\n    this.eventosFltrados = [];\n    this.widthImg = 150;\n    this.marginImg = 2;\n    this.exibirImagem = true;\n    this.filtroListado = '';\n  }\n  alterarImagem() {\n    this.exibirImagem = !this.exibirImagem;\n  }\n  ngOnInit() {\n    this.getEventos();\n  }\n  // public getEventos(): void{\n  // this.eventoService.getEventos().subscribe(\n  //   (eventosResp: Evento[]) => {\n  //   this.eventos = eventosResp\n  //  this.eventosFltrados = this.eventos;\n  // },\n  // error => console.log(error)\n  //);\n  //}\n  getEventos() {\n    const observer = {\n      next: eventos => {\n        this.eventos = eventos;\n        this.eventosFltrados = this.eventos;\n      },\n      error: error => console.log(error)\n    };\n    this.eventoService.getEventos().subscribe(observer);\n  }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template, {\n      class: 'modal-lg'\n    });\n  }\n  confirm() {\n    this.message = \"Confirmado!\";\n    this.modalRef?.hide();\n  }\n};\nEventosComponent = __decorate([Component({\n  selector: 'app-eventos',\n  templateUrl: './eventos.component.html',\n  styleUrls: ['./eventos.component.scss']\n})], EventosComponent);\nexport { EventosComponent };\n() => {\n  this.message = \"Confirmado!\";\n  this.modalRef?.hide();\n};","map":{"version":3,"mappings":";AACA,SAASA,SAAS,QAAqB,eAAe;AAY/C,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAU3B,IAAWC,YAAY;IACpB,OAAO,IAAI,CAACC,aAAa;EAC5B;EAEA,IAAWD,YAAY,CAACE,KAAa;IAClC,IAAI,CAACD,aAAa,GAAGC,KAAK;IAC1B,IAAI,CAACC,eAAe,GAAG,IAAI,CAACH,YAAY,GAAG,IAAI,CAACI,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC,GAAG,IAAI,CAACK,OAAO;EAClG;EAEOD,aAAa,CAACE,SAAiB;IACnCA,SAAS,GAAGA,SAAS,CAACC,iBAAiB,EAAE;IACzC,OAAO,IAAI,CAACF,OAAO,CAACG,MAAM,CACrBC,MAAoC,IAAMA,MAAM,CAACC,IAAI,CAACH,iBAAiB,EAAE,CAACI,OAAO,CAACL,SAAS,CAAC,KAAK,CAAC,CAAC,IACpGG,MAAM,CAACG,KAAK,CAACL,iBAAiB,EAAE,CAACI,OAAO,CAACL,SAAS,CAAC,KAAK,CAAC,CAAC,CAE7D;EACJ;EAEAO,YAAoBC,aAA4B,EAAUC,YAA4B;IAAlE,kBAAa,GAAbD,aAAa;IAAyB,iBAAY,GAAZC,YAAY;IA1B/D,YAAO,GAAa,EAAE;IACtB,oBAAe,GAAa,EAAE;IACrC,aAAQ,GAAG,GAAG;IACd,cAAS,GAAG,CAAC;IACb,iBAAY,GAAG,IAAI;IACX,kBAAa,GAAG,EAAE;EAqBgE;EAGnFC,aAAa;IACjB,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACzC;EAEOC,QAAQ;IACb,IAAI,CAACC,UAAU,EAAE;EACnB;EAGD;EACE;EACE;EACE;EACC;EAED;EACA;EACH;EACF;EAEOA,UAAU;IACf,MAAMC,QAAQ,GAAG;MACfC,IAAI,EAAEhB,OAAiB,IAAI;QACzB,IAAI,CAACA,OAAO,GAAGA,OAAO;QACtB,IAAI,CAACF,eAAe,GAAE,IAAI,CAACE,OAAO;MACpC,CAAC;MAEDiB,KAAK,EAAGA,KAAU,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK;KACzC;IAED,IAAI,CAACR,aAAa,CAACK,UAAU,EAAE,CAACM,SAAS,CAACL,QAAQ,CAAC;EACrD;EAEAM,SAAS,CAACC,QAA0B;IAClC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACb,YAAY,CAACc,IAAI,CAACF,QAAQ,EAAE;MAAEG,KAAK,EAAE;IAAU,CAAE,CAAC;EACzE;EAEAC,OAAO;IACJ,IAAI,CAACC,OAAO,GAAG,aAAa;IAC5B,IAAI,CAACJ,QAAQ,EAAEK,IAAI,EAAE;EAExB;CAAC;AAxEUlC,gBAAgB,eAN5BD,SAAS,CAAC;EACToC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,0BAA0B;CAEvC,CAAC,GACWrC,gBAAgB,CAwE1B;SAxEUA,gBAAgB;AAyE3B,MAAE;EACA,IAAI,CAACiC,OAAO,GAAG,aAAa;EAC5B,IAAI,CAACJ,QAAQ,EAAEK,IAAI,EAAE;AAExB,CAAC","names":["Component","EventosComponent","filtroLitsta","filtroListado","value","eventosFltrados","filtroEventos","eventos","filtroPor","toLocaleLowerCase","filter","evento","tema","indexOf","local","constructor","eventoService","modalService","alterarImagem","exibirImagem","ngOnInit","getEventos","observer","next","error","console","log","subscribe","openModal","template","modalRef","show","class","confirm","message","hide","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Cleiton Cristovam\\Desktop\\Cursos Udemy\\FullStackWebApi\\PROEVENTOS\\Front\\ProEventos-App\\src\\app\\eventos\\eventos.component.ts"],"sourcesContent":["\nimport { Component, TemplateRef } from '@angular/core';\nimport { Evento } from 'models/Evento';\nimport { BsComponentRef } from 'ngx-bootstrap/component-loader';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { EventoService } from '../services/evento.service';\n\n@Component({\n  selector: 'app-eventos',\n  templateUrl: './eventos.component.html',\n  styleUrls: ['./eventos.component.scss'],\n\n})\nexport class EventosComponent  {\n  modalRef?: BsModalRef | null;\n  public eventos: Evento[] = [];\n  public eventosFltrados: Evento[] = [];\n  widthImg = 150;\n  marginImg = 2;\n  exibirImagem = true;\n  private filtroListado = '';\n\n\n  public get filtroLitsta(){\n     return this.filtroListado;\n  }\n\n  public set filtroLitsta(value: string){\n     this.filtroListado = value;\n     this.eventosFltrados = this.filtroLitsta ? this.filtroEventos(this.filtroLitsta) : this.eventos;\n  }\n\n  public filtroEventos(filtroPor: string): Evento[]{\n     filtroPor = filtroPor.toLocaleLowerCase();\n     return this.eventos.filter(\n         (evento: {tema:string; local: string})  => evento.tema.toLocaleLowerCase().indexOf(filtroPor) !== -1 ||\n         evento.local.toLocaleLowerCase().indexOf(filtroPor) !== -1\n\n     );\n  };\n\n  constructor(private eventoService: EventoService, private modalService: BsModalService) { }\n\n\n  public alterarImagem(): void {\n     this.exibirImagem = !this.exibirImagem;\n  }\n\n  public ngOnInit() : void{\n    this.getEventos();\n  }\n\n\n // public getEventos(): void{\n   // this.eventoService.getEventos().subscribe(\n     //   (eventosResp: Evento[]) => {\n       //   this.eventos = eventosResp\n        //  this.eventosFltrados = this.eventos;\n\n       // },\n       // error => console.log(error)\n    //);\n  //}\n\n  public getEventos(): void{\n    const observer = {\n      next:(eventos: Evento[]) => {\n        this.eventos = eventos;\n        this.eventosFltrados =this.eventos;\n      },\n\n      error: (error: any) => console.log(error)\n    };\n\n    this.eventoService.getEventos().subscribe(observer);\n  }\n\n  openModal(template: TemplateRef<any>) {\n    this.modalRef = this.modalService.show(template, { class: 'modal-lg' });\n  }\n\n  confirm() {\n     this.message = \"Confirmado!\";\n     this.modalRef?.hide();\n\n  }\n  () {\n    this.message = \"Confirmado!\";\n    this.modalRef?.hide();\n\n }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}