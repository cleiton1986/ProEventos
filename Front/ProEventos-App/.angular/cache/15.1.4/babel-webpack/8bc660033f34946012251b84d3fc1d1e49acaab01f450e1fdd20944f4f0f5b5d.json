{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EventoListaComponent = class EventoListaComponent {\n  ngOnInit() {\n    this.spinner.show();\n    this.getEventos();\n    /* setTimeout(() => {\r\n       this.spinner.hide();\r\n        \r\n     }, 5000); */\n  }\n\n  get filtroLitsta() {\n    return this.filtroListado;\n  }\n  set filtroLitsta(value) {\n    this.filtroListado = value;\n    this.eventosFltrados = this.filtroLitsta ? this.filtroEventos(this.filtroLitsta) : this.eventos;\n  }\n  filtroEventos(filtroPor) {\n    filtroPor = filtroPor.toLocaleLowerCase();\n    return this.eventos.filter(evento => evento.tema.toLocaleLowerCase().indexOf(filtroPor) !== -1 || evento.local.toLocaleLowerCase().indexOf(filtroPor) !== -1);\n  }\n  constructor(eventoService, modalService, toastr, spinner) {\n    this.eventoService = eventoService;\n    this.modalService = modalService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.eventos = [];\n    this.eventosFltrados = [];\n    this.widthImg = 150;\n    this.marginImg = 2;\n    this.exibirImagem = true;\n    this.filtroListado = '';\n  }\n  alterarImagem() {\n    this.exibirImagem = !this.exibirImagem;\n  }\n  // public getEventos(): void{\n  // this.eventoService.getEventos().subscribe(\n  //   (eventosResp: Evento[]) => {\n  //   this.eventos = eventosResp\n  //  this.eventosFltrados = this.eventos;\n  // },\n  // error => console.log(error)\n  //);\n  //}\n  getEventos() {\n    /* const observer = {\r\n       next:(eventos: Evento[]) => {\r\n         this.eventos = eventos;\r\n         this.eventosFltrados =this.eventos;\r\n       },\r\n       error: (error: any) => {\r\n         this.spinner.hide();\r\n         this.toastr.error('Erro ao carregar os eventos', 'Error!');\r\n       },\r\n      // complete: () => this.spinner.hide()\r\n     };\r\n            */\n    this.eventoService.getEventos().subscribe({\n      next: eventos => {\n        this.eventos = eventos;\n        this.eventosFltrados = this.eventos;\n      },\n      error: error => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao carregar os eventos', 'Error!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template, {\n      class: 'modal-lg'\n    });\n  }\n  confirma() {\n    this.modalRef?.hide();\n    this.toastr.success('Evento deletado com sucesso.', 'Deletado');\n  }\n  decline() {\n    this.modalRef?.hide();\n  }\n};\nEventoListaComponent = __decorate([Component({\n  selector: 'app-evento-lista',\n  templateUrl: './evento-lista.component.html',\n  styleUrls: ['./evento-lista.component.css']\n})], EventoListaComponent);\nexport { EventoListaComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAYxBC,QAAQ;IACb,IAAI,CAACC,OAAO,CAACC,IAAI,EAAE;IACnB,IAAI,CAACC,UAAU,EAAE;IAElB;;;;EAKD;;EAEA,IAAWC,YAAY;IACpB,OAAO,IAAI,CAACC,aAAa;EAC5B;EAEA,IAAWD,YAAY,CAACE,KAAa;IAClC,IAAI,CAACD,aAAa,GAAGC,KAAK;IAC1B,IAAI,CAACC,eAAe,GAAG,IAAI,CAACH,YAAY,GAAG,IAAI,CAACI,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC,GAAG,IAAI,CAACK,OAAO;EAClG;EAEOD,aAAa,CAACE,SAAiB;IACnCA,SAAS,GAAGA,SAAS,CAACC,iBAAiB,EAAE;IACzC,OAAO,IAAI,CAACF,OAAO,CAACG,MAAM,CACrBC,MAAoC,IAAMA,MAAM,CAACC,IAAI,CAACH,iBAAiB,EAAE,CAACI,OAAO,CAACL,SAAS,CAAC,KAAK,CAAC,CAAC,IACpGG,MAAM,CAACG,KAAK,CAACL,iBAAiB,EAAE,CAACI,OAAO,CAACL,SAAS,CAAC,KAAK,CAAC,CAAC,CAE7D;EACJ;EAEAO,YAAoBC,aAA4B,EACtCC,YAA4B,EAC5BC,MAAqB,EACrBnB,OAA0B;IAHhB,kBAAa,GAAbiB,aAAa;IACvB,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IACN,YAAO,GAAPnB,OAAO;IAzCV,YAAO,GAAa,EAAE;IACtB,oBAAe,GAAa,EAAE;IACrC,aAAQ,GAAG,GAAG;IACd,cAAS,GAAG,CAAC;IACb,iBAAY,GAAG,IAAI;IACX,kBAAa,GAAG,EAAE;EAoCc;EAGjCoB,aAAa;IACjB,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACzC;EAID;EACE;EACE;EACE;EACC;EAED;EACA;EACH;EACF;EAEOnB,UAAU;IAChB;;;;;;;;;;;;IAcC,IAAI,CAACe,aAAa,CAACf,UAAU,EAAE,CAACoB,SAAS,CAAC;MACxCC,IAAI,EAAEf,OAAiB,IAAI;QACzB,IAAI,CAACA,OAAO,GAAGA,OAAO;QACtB,IAAI,CAACF,eAAe,GAAE,IAAI,CAACE,OAAO;MACpC,CAAC;MACDgB,KAAK,EAAGA,KAAU,IAAI;QACpB,IAAI,CAACxB,OAAO,CAACyB,IAAI,EAAE;QACnB,IAAI,CAACN,MAAM,CAACK,KAAK,CAAC,6BAA6B,EAAE,QAAQ,CAAC;MAC5D,CAAC;MACAE,QAAQ,EAAE,MAAM,IAAI,CAAC1B,OAAO,CAACyB,IAAI;KACnC,CAAC;EACJ;EAEAE,SAAS,CAACC,QAA0B;IAClC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACX,YAAY,CAACjB,IAAI,CAAC2B,QAAQ,EAAE;MAAEE,KAAK,EAAE;IAAU,CAAE,CAAC;EAEzE;EAEAC,QAAQ;IACL,IAAI,CAACF,QAAQ,EAAEJ,IAAI,EAAE;IACrB,IAAI,CAACN,MAAM,CAACa,OAAO,CAAC,8BAA8B,EAAE,UAAU,CAAC;EAClE;EAEAC,OAAO;IACL,IAAI,CAACJ,QAAQ,EAAEJ,IAAI,EAAE;EACxB;CAGA;AA3GY3B,oBAAoB,eALhCD,SAAS,CAAC;EACTqC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACWtC,oBAAoB,CA2GhC;SA3GYA,oBAAoB","names":["Component","EventoListaComponent","ngOnInit","spinner","show","getEventos","filtroLitsta","filtroListado","value","eventosFltrados","filtroEventos","eventos","filtroPor","toLocaleLowerCase","filter","evento","tema","indexOf","local","constructor","eventoService","modalService","toastr","alterarImagem","exibirImagem","subscribe","next","error","hide","complete","openModal","template","modalRef","class","confirma","success","decline","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Cleiton Cristovam\\Desktop\\Cursos Udemy\\FullStackWebApi\\PROEVENTOS\\Front\\ProEventos-App\\src\\app\\components\\eventos\\evento-lista\\evento-lista.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Evento } from 'models/Evento';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { EventoService } from 'src/app/services/evento.service';\n\n@Component({\n  selector: 'app-evento-lista',\n  templateUrl: './evento-lista.component.html',\n  styleUrls: ['./evento-lista.component.css']\n})\nexport class EventoListaComponent implements OnInit {\n\n  modalRef?: BsModalRef | null;\n  public eventos: Evento[] = [];\n  public eventosFltrados: Evento[] = [];\n  widthImg = 150;\n  marginImg = 2;\n  exibirImagem = true;\n  private filtroListado = '';\n\n\n\n  public ngOnInit() : void{\n    this.spinner.show();\n    this.getEventos();\n\n   /* setTimeout(() => {\n      this.spinner.hide();\n\n\n    }, 5000); */\n  }\n\n  public get filtroLitsta(){\n     return this.filtroListado;\n  }\n\n  public set filtroLitsta(value: string){\n     this.filtroListado = value;\n     this.eventosFltrados = this.filtroLitsta ? this.filtroEventos(this.filtroLitsta) : this.eventos;\n  }\n\n  public filtroEventos(filtroPor: string): Evento[]{\n     filtroPor = filtroPor.toLocaleLowerCase();\n     return this.eventos.filter(\n         (evento: {tema:string; local: string})  => evento.tema.toLocaleLowerCase().indexOf(filtroPor) !== -1 ||\n         evento.local.toLocaleLowerCase().indexOf(filtroPor) !== -1\n\n     );\n  };\n\n  constructor(private eventoService: EventoService,\n    private modalService: BsModalService,\n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService) { }\n\n\n  public alterarImagem(): void {\n     this.exibirImagem = !this.exibirImagem;\n  }\n\n\n\n // public getEventos(): void{\n   // this.eventoService.getEventos().subscribe(\n     //   (eventosResp: Evento[]) => {\n       //   this.eventos = eventosResp\n        //  this.eventosFltrados = this.eventos;\n\n       // },\n       // error => console.log(error)\n    //);\n  //}\n\n  public getEventos(): void{\n   /* const observer = {\n      next:(eventos: Evento[]) => {\n        this.eventos = eventos;\n        this.eventosFltrados =this.eventos;\n      },\n      error: (error: any) => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao carregar os eventos', 'Error!');\n      },\n     // complete: () => this.spinner.hide()\n    };\n\n    */\n\n    this.eventoService.getEventos().subscribe({\n      next:(eventos: Evento[]) => {\n        this.eventos = eventos;\n        this.eventosFltrados =this.eventos;\n      },\n      error: (error: any) => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao carregar os eventos', 'Error!');\n      },\n       complete: () => this.spinner.hide()\n    });\n  }\n\n  openModal(template: TemplateRef<any>): void {\n    this.modalRef = this.modalService.show(template, { class: 'modal-lg' });\n\n  }\n\n  confirma() {\n     this.modalRef?.hide();\n     this.toastr.success('Evento deletado com sucesso.', 'Deletado');\n  }\n\n  decline(): void {\n    this.modalRef?.hide();\n }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}